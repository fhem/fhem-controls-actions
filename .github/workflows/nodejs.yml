name: "Test Jobs"

on:
  pull_request:
  push:


jobs:
  # unit tests
  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x ,14.x]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: npm install, build, and test
      run: |
        npm ci
        npm run build --if-present
        npm test
      env:
        CI: true

  # test action works running from the graph
  inlinetest:
    env:
      CONTROLS_FILE: controls_tests.txt
      FILES_DIR: ./__tests__
      FILES_EXTENSION: .pm
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Run fhem-controls-action
      id: controls
      uses: ./
      with:
        filename: ${{ env.CONTROLS_FILE }}
        directory: ${{ env.FILES_DIR }}
        extension: ${{ env.FILES_EXTENSION }}

    - name: Check if controls_tests.txt is written
      uses: andstor/file-existence-action@v1
      with:
        files: ${{ env.CONTROLS_FILE }}
        allow_failure: false

    - name: Check if controls_tests.txt has correct output
      id: contentCheck
      run: |
        set +e
        grep "^UPD 2020-12-30_03:02:16 33     ./__tests__/mock.pm$" ${{ env.CONTROLS_FILE }}
        echo "::set-output name=exitcode::$(echo $?)"
        set -e

    - name: Check if controls output has entries as expected
      run: |
        echo "${{ steps.controls.outputs.controls_content }}"

    - name: Fail if there was an error during tests
      run: exit 1
      if: ${{ steps.contentCheck.outputs.exitcode != 0 }} 


